name: Deploy to Amazon ECS

on:
  push:
    paths: 'frontend/**'
    branches: [ "main" ]

  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-frontend:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REPO: ${{ secrets.ECR_FRONTEND_REPO_URI }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REPO:$IMAGE_TAG ./frontend
        docker push $ECR_REPO:$IMAGE_TAG
        echo "image=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      env:
        IMAGE_URI: ${{ steps.build-image.output.image }}
        SERVICE_NAME: ${{ secrets.ECS_FRONTEND_SERVICE_NAME }}
        CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}
      run: |
        FAMILY=$(aws ecs describe-services --services $SERVICE_NAME --cluster $CLUSTER --query "services[0].taskDefinition" --output text | awk -F'/' '{print $2}' | awk -F':' '{print $1}')
        TASK_DEF=$(aws ecs describe-task-definition --task-definition $FAMILY)
        NEW_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$IMAGE_URI" --arg CONTAINER_NAME "react-container" '                                                                                                                                                      
          .taskDefinition |
          {
            family,
            containerDefinitions: (.containerDefinitions | map(
              if .name == $CONTAINER_NAME then
                .image = $IMAGE
              else
                .
              end
            )),
            requiresCompatibilities,
            cpu,
            memory,
            networkMode,
            executionRoleArn
          }
        ')
        echo "$NEW_DEF" > new-task-def.json
        aws ecs register-task-definition --cli-input-json file://new-task-def.json > output.json
        TASK_DEF_ARN=$(cat output.json | jq -r '.taskDefinition.taskDefinitionArn')
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Deploy Amazon ECS task definition
      env:
        SERVICE_NAME: ${{ secrets.ECS_FRONTEND_SERVICE_NAME }}
        CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      run: |
        aws ecs update-service --task-definition $TASK_DEF_ARN \
        --service $SERVICE_NAME \
        --cluster $CLUSTER_NAME
